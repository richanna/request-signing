



OAuth Working Group                                       J. Richer, Ed.
Internet-Draft
Intended status: Standards Track                              J. Bradley
Expires: June 18, 2020                                     Ping Identity
                                                           H. Tschofenig
                                                             ARM Limited
                                                       December 16, 2019


    Proof-of-Possession for OAuth 2.0 Using HTTP Message Signatures
                draft-ietf-oauth-signed-http-request-03

Abstract

   This document defines a method for using HTTP Message Signatures as
   proof-of-possession for OAuth 2.0 access tokens that are bound to a
   cryptographic key.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 18, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Richer, et al.            Expires June 18, 2020                 [Page 1]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Creating a PoP Message Signature for an HTTP Request  . . . .   3
   4.  Sending the signed object . . . . . . . . . . . . . . . . . .   4
     4.1.  HTTP Signature header field . . . . . . . . . . . . . . .   4
     4.2.  HTTP Form body  . . . . . . . . . . . . . . . . . . . . .   4
     4.3.  HTTP Query parameter  . . . . . . . . . . . . . . . . . .   5
   5.  Validating the request  . . . . . . . . . . . . . . . . . . .   5
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   5
     6.1.  The 'pop' OAuth Access Token Type . . . . . . . . . . . .   5
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .   6
     7.1.  Plaintext Storage of Credentials  . . . . . . . . . . . .   6
     7.2.  Entropy of Keys . . . . . . . . . . . . . . . . . . . . .   6
     7.3.  Denial of Service . . . . . . . . . . . . . . . . . . . .   6
   8.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .   7
   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   7
   10. Normative References  . . . . . . . . . . . . . . . . . . . .   7
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   8

1.  Introduction

   In order to prove possession of an access token and its associated
   key, an OAuth 2.0 client needs to compute some cryptographic function
   and present the results to the protected resource as a signature.
   The protected resource then needs to verify the signature and compare
   that to the expected keys associated with the access token.  This is
   in addition to the normal token protections provided by a bearer
   token [RFC6750] and transport layer security (TLS).

   Furthermore, it is desirable to bind the signature to the HTTP
   request.  Ideally, this should be done without replicating the
   information already present in the HTTP request more than required.
   However, many HTTP application frameworks insert extra headers, query
   parameters, and otherwise manipulate the HTTP request on its way from
   the web server into the application code itself.  The proof-of-
   poession mechanism defined within this document uses the signing
   mechanism defined in [I-D.richanna-http-message-signatures] for this
   purpose.

   The key required for this signature calculation is distributed via
   mechanisms described in companion documents (see
   [I-D.ietf-oauth-pop-key-distribution] and
   [I-D.ietf-oauth-pop-architecture]).



Richer, et al.            Expires June 18, 2020                 [Page 2]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   The mechanism described in this document assumes that a client is in
   possession of an access token and asociated key.  When using the
   access token to authorize requests for protected resources, the
   client additionally creates an HTTP Message Signature over the
   Authorization header field and other elements of the HTTP request,
   using the key to which the access token is bound.  The client then
   attaches it to the request using the Signature header field.  The
   protected resource verifies the HTTP Message Signature to confirm
   prossession of the key.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119 [RFC2119].

   Other terms such as "client", "authorization server", "access token",
   and "protected resource" are inherited from OAuth 2.0 [RFC6749].

   The terms "HTTP Message Signature" and "Covered Content" are
   inherited from HTTP Message Signatures
   [I-D.richanna-http-message-signatures].

   We use the term 'sign' (or 'signature') to denote both a keyed
   message digest and a digital signature operation.

3.  Creating a PoP Message Signature for an HTTP Request

   A PoP Message Signature is an HTTP Message Signature
   [I-D.richanna-http-message-signatures] that provides proof of
   possession of the key to which an access token is bound, and
   optionally protects the access token and/or other parts of a request
   to a protected resource.

   PoP Message Signatures are created according to the process defined
   in [I-D.richanna-http-message-signatures], and MUST comply with the
   additional requirements defined within this section.

   The following content identifiers MUST be included within the
   signature's Covered Content, in any order:

      "(created)"

      "(expires)", if the signature has an Expiration Time.

      "authorization"




Richer, et al.            Expires June 18, 2020                 [Page 3]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   The following content identifiers SHOULD be included within the
   signature's Covered Content, in any order:

      "(method)"

      "(scheme)"

      "(authority)"

      "(path)"

4.  Sending the signed object

   In order to attach the PoP Message Signature to the request, the
   client includes it in one of the following three places.

4.1.  HTTP Signature header field

   The client SHOULD send the object to the protected resource in the
   Signature header field as described in
   [I-D.richanna-http-message-signatures].  When doing so, the client
   MUST include the "algorithm", "created", and "headers" parameters,
   and MUST include the "expires" parameter if the signature has an
   Expiration Time.

   GET /resource/foo
   Authorization: PoP eyJ....omitted for brevity...
   Signature: algorithm="rsa-sha256", created=..., expires=...,
       headers="...", signature=...

4.2.  HTTP Form body

   If the client is sending the request as a form-encoded HTTP message
   with parameters in the body, the client MAY send the PoP Message
   Signature as part of that form body.  The client constructs a
   Signature header field value as described in Section 4.1, percent-
   encodes the value as described in [RFC3986], and sends the resulting
   encoded value as the form parameter "pop_signature".  The access
   token is sent as the form parameter "pop_access_token".  Note that if
   this method is used the Digest header field cannot be included in the
   signature's Covered Contents.

   POST /resource
   Content-type: application/www-form-encoded

   pop_access_token=eyJ....omitted for brevity...&pop_signature=...





Richer, et al.            Expires June 18, 2020                 [Page 4]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


4.3.  HTTP Query parameter

   If neither the Authorization header nor the form-encoded body
   parameter are available to the client, the client MAY send the PoP
   Message Signature and access token as query parameters.  The PoP
   Message Signature is encoded as described in Section 4.2 and sent as
   the query parameter "pop_signature", and the the access token is sent
   as the query parameter "pop_access_token".  Note that if this method
   is used, the "pop_signature" parameter MUST NOT be included in the
   signature's Covered Contents.

   GET /resource?pop_access_token=eyJ...&pop_signature=...

5.  Validating the request

   Just like with a bearer token [RFC6750], while the access token value
   included in the request is opaque to the client, it MUST be
   understood by the protected resource in order to fulfill the request.
   Also like a bearer token, the protected resource traditionally has
   several methods at its disposal for understanding the access token.
   It can look up the token locally (such as in a database), it can
   parse a structured token (such as JWT [RFC7519]), or it can use a
   service to look up token information (such as introspection
   [RFC7662]).  Whatever method is used to look up token information,
   the protected resource MUST have access to the key associated with
   the access token, as this key is required to validate the signature
   of the incoming request.  Validation of the signature is done using
   the verification process defined in
   [I-D.richanna-http-message-signatures].  The resource MUST verify
   that the algorithm and key used to generate the signature match those
   to which the access token is bound.

6.  IANA Considerations

6.1.  The 'pop' OAuth Access Token Type

   Section 11.1 of [RFC6749] defines the OAuth Access Token Type
   Registry and this document adds another token type to this registry.

   Type name:  pop

   Additional Token Endpoint Response Parameters:  (none)

   HTTP Authentication Scheme(s):  Proof-of-possession access token for
      use with OAuth 2.0

   Change controller:  IETF




Richer, et al.            Expires June 18, 2020                 [Page 5]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   Specification document(s):  [[ this document ]]

7.  Security Considerations

7.1.  Plaintext Storage of Credentials

   The mechanism described in this document works in a similar way to
   many three-party authentication and key exchange mechanisms.  In
   order to compute the signature over the HTTP request, the client must
   have access to a key bound to the access token in plaintext form.  If
   an attacker were to gain access to these stored secrets at the client
   or (in case of symmetric keys) at the resource server they would be
   able to perform any action on behalf of any client just as if they
   had stolen a bearer token.

   It is therefore paramount to the security of the protocol that the
   private keys associated with the access tokens are protected from
   unauthorized access.

7.2.  Entropy of Keys

   Unless TLS is used between the client and the resource server,
   eavesdroppers will have full access to requests sent by the client.
   They will thus be able to mount off-line brute-force attacks to
   attempt recovery of the session key or private key used to compute
   the keyed message digest or digital signature, respectively.

   This specification assumes that the key used herein has been
   distributed via other mechanisms, such as
   [I-D.ietf-oauth-pop-key-distribution].  Hence, it is the
   responsibility of the authorization server and or the client to be
   careful when generating fresh and unique keys with sufficient entropy
   to resist such attacks for at least the length of time that the
   session keys (and the access tokens) are valid.

   For example, if the key bound to the access token is valid for one
   day, authorization servers must ensure that it is not possible to
   mount a brute force attack that recovers that key in less than one
   day.  Of course, servers are urged to err on the side of caution, and
   use the longest key length possible within reason.

7.3.  Denial of Service

   This specification includes a number of features which may make
   resource exhaustion attacks against resource servers possible.  For
   example, a resource server may need to process the incoming request,
   verify the access token, perform signature verification, and might
   (in certain circumstances) have to consult back-end databases or the



Richer, et al.            Expires June 18, 2020                 [Page 6]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   authorization server before granting access to the protected
   resource.  Many of these actions are shared with bearer tokens, but
   the additional cryptographic overhead of validating the signed
   request needs to be taken into consideration with deployment of this
   specification.

   An attacker may exploit this to perform a denial of service attack by
   sending a large number of invalid requests to the server.  The
   computational overhead of verifying the keyed message digest alone is
   not likely sufficient to mount a denial of service attack.  To help
   combat this, it is RECOMMENDED that the protected resource validate
   the access token before performing any cryptographic verification
   calculations.

8.  Privacy Considerations

   This specification addresses machine to machine communications and
   raises no privacy considerations beyond existing OAuth transactions.

9.  Acknowledgements

   The authors thank the OAuth Working Group for input into this work.

10.  Normative References

   [I-D.ietf-oauth-pop-architecture]
              Hunt, P., Richer, J., Mills, W., Mishra, P., and H.
              Tschofenig, "OAuth 2.0 Proof-of-Possession (PoP) Security
              Architecture", draft-ietf-oauth-pop-architecture-08 (work
              in progress), July 2016.

   [I-D.ietf-oauth-pop-key-distribution]
              Bradley, J., Hunt, P., Jones, M., Tschofenig, H., and M.
              Meszaros, "OAuth 2.0 Proof-of-Possession: Authorization
              Server to Client Key Distribution", draft-ietf-oauth-pop-
              key-distribution-07 (work in progress), March 2019.

   [I-D.richanna-http-message-signatures]
              Backman, A., Richer, J., and M. Sporny, "Signing HTTP
              Messages", draft-richanna-http-message-signatures-00 (work
              in progress), December 2019.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.





Richer, et al.            Expires June 18, 2020                 [Page 7]

Internet-Draft     OAuth PoP Using Message Signatures      December 2019


   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <https://www.rfc-editor.org/info/rfc6750>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC7662]  Richer, J., Ed., "OAuth 2.0 Token Introspection",
              RFC 7662, DOI 10.17487/RFC7662, October 2015,
              <https://www.rfc-editor.org/info/rfc7662>.

Authors' Addresses

   Justin Richer (editor)

   Email: ietf@justin.richer.org


   John Bradley
   Ping Identity

   Email: ve7jtb@ve7jtb.com
   URI:   http://www.thread-safe.com/


   Hannes Tschofenig
   ARM Limited
   Austria

   Email: Hannes.Tschofenig@gmx.net
   URI:   http://www.tschofenig.priv.at









Richer, et al.            Expires June 18, 2020                 [Page 8]
