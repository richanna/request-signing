<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-oauth-signed-http-request-03"
     ipr="trust200902">
  <front>
    <title abbrev="OAuth PoP Using Message Signatures">Proof-of-Possession for OAuth 2.0 Using HTTP Message Signatures</title>

    <author fullname="Justin Richer" initials="J." role="editor"
            surname="Richer">
      <address>
        <email>ietf@justin.richer.org</email>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>

      <address>
        <email>ve7jtb@ve7jtb.com</email>

        <uri>http://www.thread-safe.com/</uri>
      </address>
    </author>

    <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
      <organization>ARM Limited</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country>Austria</country>
        </postal>

        <phone/>

        <email>Hannes.Tschofenig@gmx.net</email>

        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <date day="16" month="12" year="2019"/>

    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>

    <abstract>
        <t>This document defines a method for using HTTP Message Signatures as
            proof-of-possession for OAuth 2.0 access tokens that are bound to
            a cryptographic key.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>In order to prove possession of an access token and its associated
      key, an OAuth 2.0 client needs to compute some cryptographic function
      and present the results to the protected resource as a signature. The
      protected resource then needs to verify the signature and compare that
      to the expected keys associated with the access token. This is in
      addition to the normal token protections provided by a <xref
      target="RFC6750">bearer token</xref> and transport layer security
      (TLS).</t>

      <t>Furthermore, it is desirable to bind the signature to the HTTP
      request. Ideally, this should be done without replicating the
      information already present in the HTTP request more than required.
      However, many HTTP application frameworks insert extra headers, query
      parameters, and otherwise manipulate the HTTP request on its way from
      the web server into the application code itself.  The proof-of-poession
      mechanism defined within this document uses the signing mechanism defined
      in <xref target="I-D.richanna-http-message-signatures"/> for this purpose.</t>

      <t>The key required for this signature calculation is distributed via
      mechanisms described in companion documents (see <xref
      target="I-D.ietf-oauth-pop-key-distribution"/> and <xref
      target="I-D.ietf-oauth-pop-architecture"/>).</t>

      <t>The mechanism described in this document assumes that a client is in
          possession of an access token and asociated key. When using the access
          token to authorize requests for protected resources, the client additionally
          creates an HTTP Message Signature over the Authorization header field and
          other elements of the HTTP request, using the key to which the access token
          is bound.  The client then attaches it to the request using the Signature
          header field.  The protected resource verifies the HTTP Message Signature
          to confirm prossession of the key.</t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>

      <t>Other terms such as "client", "authorization server", "access token",
      and "protected resource" are inherited from <xref target="RFC6749">OAuth
      2.0</xref>.</t>

      <t>The terms "HTTP Message Signature" and "Covered Content" are inherited
      from <xref target="I-D.richanna-http-message-signatures">HTTP Message
      Signatures</xref>.</t>

      <t>We use the term 'sign' (or 'signature') to denote both a keyed
      message digest and a digital signature operation.</t>
    </section>

    <section title="Creating a PoP Message Signature for an HTTP Request">
      <t>A PoP Message Signature is an HTTP Message Signature <xref target="I-D.richanna-http-message-signatures"/>
      that provides proof of possession of the key to which an access token is
      bound, and optionally protects the access token and/or other parts of
      a request to a protected resource.</t>

      <t>PoP Message Signatures are created according to the process defined in
      <xref target="I-D.richanna-http-message-signatures"/>, and MUST comply with
      the additional requirements defined within this section.</t>

      <t>The following content identifiers MUST be included within the signature's Covered
      Content, in any order:
      <list style="bullet">
          <t><spanx style="verb">(created)</spanx></t>
          <t><spanx style="verb">(expires)</spanx>, if the signature has an Expiration Time.</t>
          <t><spanx style="verb">authorization</spanx></t>
      </list>
      </t>

      <t>The following content identifiers SHOULD be included within the signature's Covered
      Content, in any order:
      <list style="bullet">
          <t><spanx style="verb">(method)</spanx></t>
          <t><spanx style="verb">(scheme)</spanx></t>
          <t><spanx style="verb">(authority)</spanx></t>
          <t><spanx style="verb">(path)</spanx></t>
      </list>
      </t>
    </section>

    <section title="Sending the signed object">
      <t>In order to attach the PoP Message Signature to the request, the
      client includes it in one of the following three places.</t>

      <section anchor="sig-header" title="HTTP Signature header field">
        <t>The client SHOULD send the object to the protected resource
            in the Signature header field as described in <xref target="I-D.richanna-http-message-signatures"/>.
            When doing so, the client MUST include the <spanx style="verb">algorithm</spanx>,
            <spanx style="verb">created</spanx>, and <spanx style="verb">headers</spanx>
            parameters, and MUST include the <spanx style="verb">expires</spanx> parameter
            if the signature has an Expiration Time.</t>

        <figure>
          <artwork><![CDATA[GET /resource/foo
Authorization: PoP eyJ....omitted for brevity...
Signature: algorithm="rsa-sha256", created=..., expires=...,
    headers="...", signature=...]]></artwork>
        </figure>
      </section>

      <section anchor="sig-form-body" title="HTTP Form body">
        <t>If the client is sending the request as a form-encoded HTTP message
        with parameters in the body, the client MAY send the PoP Message Signature
        as part of that form body. The client constructs a Signature header field value
        as described in <xref target="sig-header"/>, percent-encodes the value as described
        in <xref target="RFC3986"/>, and sends the resulting encoded value as the form
        parameter <spanx style="verb">pop_signature</spanx>.  The access token is sent as
        the form parameter <spanx style="verb">pop_access_token</spanx>.  Note that if
        this method is used the Digest header field cannot be included in the signature's
        Covered Contents.</t>

        <figure>
          <artwork><![CDATA[POST /resource
Content-type: application/www-form-encoded

pop_access_token=eyJ....omitted for brevity...&pop_signature=...]]></artwork>
        </figure>
      </section>

      <section title="HTTP Query parameter">
        <t>If neither the Authorization header nor the form-encoded body
        parameter are available to the client, the client MAY send the PoP
        Message Signature and access token as query parameters. The PoP
        Message Signature is encoded as described in <xref target="sig-form-body"/>
        and sent as the query parameter <spanx style="verb">pop_signature</spanx>,
        and the the access token is sent as the query parameter
        <spanx style="verb">pop_access_token</spanx>.  Note that if this method is
        used, the <spanx style="verb">pop_signature</spanx> parameter MUST NOT
        be included in the signature's Covered Contents.</t>

        <figure>
          <artwork><![CDATA[GET /resource?pop_access_token=eyJ...&pop_signature=...]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Validating the request">
      <t>Just like with a <xref target="RFC6750">bearer token</xref>, while
      the access token value included in the request is opaque to the
      client, it MUST be understood by the protected resource in order to
      fulfill the request. Also like a bearer token, the protected resource
      traditionally has several methods at its disposal for understanding the
      access token. It can look up the token locally (such as in a database),
      it can parse a structured token (such as <xref
      target="RFC7519">JWT</xref>), or it can use a service to look up token
      information (such as <xref target="RFC7662">introspection</xref>).
      Whatever method is used to look up token information, the protected
      resource MUST have access to the key associated with the access token,
      as this key is required to validate the signature of the incoming
      request. Validation of the signature is done using the verification
      process defined in <xref target="I-D.richanna-http-message-signatures"/>.
      The resource MUST verify that the algorithm and key used to generate
      the signature match those to which the access token is bound.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="The 'pop' OAuth Access Token Type">
        <t>Section 11.1 of <xref target="RFC6749"/> defines the OAuth Access
        Token Type Registry and this document adds another token type to this
        registry.</t>

        <t><list style="hanging">
            <t hangText="Type name:">pop</t>

            <t
            hangText="Additional Token Endpoint Response Parameters:">(none)</t>

            <t hangText="HTTP Authentication Scheme(s):">Proof-of-possession
            access token for use with OAuth 2.0</t>

            <t hangText="Change controller:">IETF</t>

            <t hangText="Specification document(s):">[[ this document ]]</t>
          </list></t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <section title="Plaintext Storage of Credentials">
        <t>The mechanism described in this document works in a similar way to
        many three-party authentication and key exchange mechanisms. In order
        to compute the signature over the HTTP request, the client must have
        access to a key bound to the access token in plaintext form. If an
        attacker were to gain access to these stored secrets at the client or
        (in case of symmetric keys) at the resource server they would be able
        to perform any action on behalf of any client just as if they had
        stolen a bearer token.</t>

        <t>It is therefore paramount to the security of the protocol that the
        private keys associated with the access tokens are protected from
        unauthorized access.</t>
      </section>

      <section title="Entropy of Keys">
        <t>Unless TLS is used between the client and the resource server,
        eavesdroppers will have full access to requests sent by the client.
        They will thus be able to mount off-line brute-force attacks to
        attempt recovery of the session key or private key used to compute the
        keyed message digest or digital signature, respectively.</t>

        <t>This specification assumes that the key used herein has been
        distributed via other mechanisms, such as <xref
        target="I-D.ietf-oauth-pop-key-distribution"/>. Hence, it is the
        responsibility of the authorization server and or the client to be
        careful when generating fresh and unique keys with sufficient entropy
        to resist such attacks for at least the length of time that the
        session keys (and the access tokens) are valid.</t>

        <t>For example, if the key bound to the access token is valid for one
        day, authorization servers must ensure that it is not possible to
        mount a brute force attack that recovers that key in less than one
        day. Of course, servers are urged to err on the side of caution, and
        use the longest key length possible within reason.</t>
      </section>

      <section title="Denial of Service">
        <t>This specification includes a number of features which may make
        resource exhaustion attacks against resource servers possible. For
        example, a resource server may need to process the incoming request,
        verify the access token, perform signature verification, and might (in
        certain circumstances) have to consult back-end databases or the
        authorization server before granting access to the protected resource.
        Many of these actions are shared with bearer tokens, but the
        additional cryptographic overhead of validating the signed request
        needs to be taken into consideration with deployment of this
        specification.</t>

        <t>An attacker may exploit this to perform a denial of service attack
        by sending a large number of invalid requests to the server. The
        computational overhead of verifying the keyed message digest alone is
        not likely sufficient to mount a denial of service attack. To help
        combat this, it is RECOMMENDED that the protected resource validate
        the access token before performing any cryptographic verification
        calculations.</t>
      </section>
    </section>

    <section title="Privacy Considerations">
      <t>This specification addresses machine to machine communications and
      raises no privacy considerations beyond existing OAuth transactions.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors thank the OAuth Working Group for input into this
      work.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.7519"?>

      <?rfc include="reference.RFC.3986"?>

      <?rfc include="reference.RFC.7662"?>

      <?rfc include="reference.RFC.6750"?>

      <?rfc include="reference.RFC.6749"?>

      <?rfc include="reference.I-D.ietf-oauth-pop-key-distribution"?>

      <?rfc include="reference.I-D.ietf-oauth-pop-architecture"?>

      <?rfc include="reference.I-D.richanna-http-message-signatures"?>
    </references>
  </back>
</rfc>
